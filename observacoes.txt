docker-compose up -d
docker-compose stop

docker-compose build
compilador do ts:
  npm install --save-dev typescript - localmento
  ou
  npm install -g typescript - global
  
  depois compile e rode o script:
tsc testes.ts && node testes.js





################## Start aplicação:
1- Verificar a versão do nome: node -v
1.1- Alterar a versão do node: nvm use v18.7.0

2.0- Startar o banco de dados: docker-compose up -d
2.1- Quando quiser parar: docker-compose stop

3.0- Iniciar a aplicação: npm run start:dev

######################################################

################## Acessar o pg admim:
http://localhost:8081
login: admin@root.com
senha: root

############################################## Adicionando ORM:
1- npm install @nestjs/typeorm typeorm

adiconando a anotação typerm e o proprio typeorm
eles eram adicioandos no arquivo package.json em dependencies e devDependencies

2- Criar pasta config:
        2.1- PostgresConfigService
        2.2- Adicionar o TypeOrmModule no app.module.ts
        2.3- Adicionando variaves de ambiente com a biblioteca config( npm install @nestjs/config);
        2.4- adicionalo ao app.module: ConfigModule.forRoot

3- banco de dados:
        3.1- criar docker compose e o .env
        3.2- adicione o modulo do postgres: npm install pg --save
        3.3- entra no pg admim e cria la o database
        
        


############################################## Mapeamento de entidades:
1- nas classes entitys, adicionar o import typeorm e a anotação @Entity com as configurações pertinentes.

2- Na classe PostgresConfigService, no campo entities adicionar essa comfiguração para ensinar o projeto vasculhar todos os arquivos que tenham entites e adicoinar como entidades, se lembre de anotar todos com a anotação.
            entities: [__dirname+'/**/*.entity{.js, .ts}'],
            
            
############################################## Criando o repository:

1- Ele fez o service chamar o repository padrão do typeorm, entao, ve la.
2- Depois que fizer o service, ir na moulde.ts da entidade (usuario, produto seja lá qual for) e importar o  import { TypeOrmModule } from '@nestjs/typeorm'; la e o classe.service e a classe entity epor no module dentro do TypeOrmModule.forFeature


############################################## Relacionamento entre tabelas:

- Tem que fazer o relacionamento dos daois lados:

A classe ProdutoCaracteristicaEntity recebe uma tributo produto:

@ManyToOne(()=> ProdutoEntity, // o tipo que esse atributo tem relação
    (produto) => produto.caractetisticas)// o atributo com o qual meu tipo  se relaciona 
    produto: ProdutoEntity; // many to one, muitas caracteristicas para um produto
    
    e a classe Produto recebe um array de ProdutoCaracteristicaEntity:
    
      @OneToMany(()=> ProdutoCaracteristicaEntity, // o tipo que esse atributo tem relação
    produtoCaracteristicaEntity=> produtoCaracteristicaEntity.produto)// o atributo que se relaciona com meu

    caractetisticas: ProdutoCaracteristicaEntity[]; // um produto para varias ([array de caracteristicas]) caracteristicas





























        

        
        
        
        
        
        
        
        
        
############################################## docker-compose:
docker-compose up  -d
docker-compose down


       version: '3.5'
    
    services:
      postgres:
        image: postgres:latest # ultima versão do postgres
        environment:
          POSTGRES_USER: ${DB_USERNAME}
          POSTGRES_PASSWORD: ${DB_PASSWORD}
          PGDATA: /data/postgres
        volumes:
          - postgres:/data/postgres
        ports:
          - "5432:5432" 
        networks:
          - postgres
       # restart: unless-stopped # se ele for parae, ele volta automaticamente, a não ser que seja por um stop
    
      pgadmin:
        image: dpage/pgadmin4 # pg admom na web
        environment:
          PGADMIN_DEFAULT_EMAIL: ${DB_ADMIN_EMAIL}
          PGADMIN_DEFAULT_PASSWORD: ${DB_PASSWORD}
        ports:
          - "8081:80" # http://localhost:8081/
        depends_on:
          - postgres
        networks:
          - postgres
    
    networks:
      postgres:
        driver: bridge
    
    volumes:
        postgres:










































